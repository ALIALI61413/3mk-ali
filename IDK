local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield', true))()

local Window = Rayfield:CreateWindow({
    Name = "3MK ALI Hub",
    LoadingTitle = "ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ 3MK ALI Hub",
    LoadingSubtitle = "Ÿàÿßÿ¨Ÿáÿ© ŸÖŸÖŸäÿ≤ÿ© Ÿàÿ≥ŸÑÿ≥ÿ©",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "3MKALIHub",
        FileName = "HubConfig"
    }
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

-- Variables
local fullBrightEnabled = false
local espEnabled = false
local speedEnabled = false
local speedValue = 16
local jumpEnabled = false
local jumpPowerValue = 50
local noclipEnabled = false
local hitboxSize = 10
local hitboxTransparency = 0.5
local hitboxEnabled = false
local skeletonEnabled = false

-- FullBright function
local function setFullBright(state)
    if state then
        Lighting.Ambient = Color3.fromRGB(255, 255, 255)
        Lighting.Brightness = 2
        Lighting.GlobalShadows = false
    else
        Lighting.Ambient = Color3.fromRGB(127, 127, 127)
        Lighting.Brightness = 1
        Lighting.GlobalShadows = true
    end
end

-- ESP (ŸÖÿ±ÿ®ÿπ ÿ≠ŸàŸÑ ÿßŸÑŸÑÿßÿπÿ®ŸäŸÜ)
local espBoxes = {}

local function createESPBox(player)
    local box = Drawing.new("Square")
    box.Color = Color3.fromRGB(0, 255, 0) -- ÿ£ÿÆÿ∂ÿ±
    box.Thickness = 2
    box.Filled = false
    box.Visible = false
    espBoxes[player] = box
end

local function removeESPBox(player)
    if espBoxes[player] then
        espBoxes[player]:Remove()
        espBoxes[player] = nil
    end
end

local function updateESP()
    local camera = workspace.CurrentCamera
    for player, box in pairs(espBoxes) do
        local char = player.Character
        if char and char:FindFirstChild("HumanoidRootPart") and player ~= LocalPlayer then
            local rootPart = char.HumanoidRootPart
            local pos, onScreen = camera:WorldToViewportPoint(rootPart.Position)
            if onScreen then
                local size = 50
                box.Size = Vector2.new(size, size)
                box.Position = Vector2.new(pos.X - size/2, pos.Y - size/2)
                box.Visible = true
            else
                box.Visible = false
            end
        else
            box.Visible = false
        end
    end
end

-- Speed and Jump
local function setSpeed(state)
    if state then
        Humanoid.WalkSpeed = speedValue
    else
        Humanoid.WalkSpeed = 16
    end
end

local function setJump(state)
    if state then
        Humanoid.JumpPower = jumpPowerValue
    else
        Humanoid.JumpPower = 50
    end
end

-- NoClip
local function noclipLoop()
    if noclipEnabled then
        for _, part in pairs(Character:GetChildren()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end
end
RunService.Stepped:Connect(noclipLoop)

-- Hitbox
local function applyHitbox(char, isLocal)
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp then
        if hitboxEnabled and not isLocal then
            hrp.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
            hrp.Transparency = hitboxTransparency
            hrp.BrickColor = BrickColor.new("Bright red")
            hrp.Material = Enum.Material.Neon
            hrp.CanCollide = false
        else
            hrp.Size = Vector3.new(2, 2, 1)
            hrp.Transparency = 1
            hrp.Material = Enum.Material.Plastic
            hrp.CanCollide = true
        end
    end
end

local function applyHitboxToPlayer(player)
    if player.Character then
        applyHitbox(player.Character, player == LocalPlayer)
    end
    player.CharacterAdded:Connect(function(char)
        applyHitbox(char, player == LocalPlayer)
    end)
end

Players.PlayerAdded:Connect(applyHitboxToPlayer)

RunService.Heartbeat:Connect(function()
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            applyHitbox(player.Character, player == LocalPlayer)
        end
    end
    if espEnabled then
        updateESP()
    end
end)

-- Skeleton Lines
local skeletonLines = {}

local function createLine()
    local line = Drawing.new("Line")
    line.Color = Color3.fromRGB(0,255,0)
    line.Thickness = 2
    line.Transparency = 1
    line.Visible = false
    return line
end

local function toggleSkeleton(char)
    if skeletonEnabled then
        if not skeletonLines[char] then
            local lines = {}
            local bones = {
                {"Head", "HumanoidRootPart"},
                {"HumanoidRootPart", "LeftUpperLeg"},
                {"LeftUpperLeg", "LeftLowerLeg"},
                {"LeftLowerLeg", "LeftFoot"},
                {"HumanoidRootPart", "RightUpperLeg"},
                {"RightUpperLeg", "RightLowerLeg"},
                {"RightLowerLeg", "RightFoot"},
                {"HumanoidRootPart", "UpperTorso"},
                {"UpperTorso", "LeftUpperArm"},
                {"LeftUpperArm", "LeftLowerArm"},
                {"LeftLowerArm", "LeftHand"},
                {"UpperTorso", "RightUpperArm"},
                {"RightUpperArm", "RightLowerArm"},
                {"RightLowerArm", "RightHand"}
            }
            for _=1,#bones do
                table.insert(lines, createLine())
            end
            skeletonLines[char] = lines
        end
    else
        if skeletonLines[char] then
            for _, line in pairs(skeletonLines[char]) do
                line.Visible = false
                line:Remove()
            end
            skeletonLines[char] = nil
        end
    end
end

RunService.RenderStepped:Connect(function()
    if not skeletonEnabled then return end
    local camera = workspace.CurrentCamera
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            local char = player.Character
            toggleSkeleton(char)
            local lines = skeletonLines[char]
            if lines then
                local bones = {
                    {"Head", "HumanoidRootPart"},
                    {"HumanoidRootPart", "LeftUpperLeg"},
                    {"LeftUpperLeg", "LeftLowerLeg"},
                    {"LeftLowerLeg", "LeftFoot"},
                    {"HumanoidRootPart", "RightUpperLeg"},
                    {"RightUpperLeg", "RightLowerLeg"},
                    {"RightLowerLeg", "RightFoot"},
                    {"HumanoidRootPart", "UpperTorso"},
                    {"UpperTorso", "LeftUpperArm"},
                    {"LeftUpperArm", "LeftLowerArm"},
                    {"LeftLowerArm", "LeftHand"},
                    {"UpperTorso", "RightUpperArm"},
                    {"RightUpperArm", "RightLowerArm"},
                    {"RightLowerArm", "RightHand"}
                }
                for i, bone in ipairs(bones) do
                    local part0 = char:FindFirstChild(bone[1])
                    local part1 = char:FindFirstChild(bone[2])
                    if part0 and part1 then
                        local p0, vis0 = camera:WorldToViewportPoint(part0.Position)
                        local p1, vis1 = camera:WorldToViewportPoint(part1.Position)
                        if vis0 and vis1 then
                            lines[i].Visible = true
                            lines[i].From = Vector2.new(p0.X, p0.Y)
                            lines[i].To = Vector2.new(p1.X, p1.Y)
                        else
                            lines[i].Visible = false
                        end
                    else
                        lines[i].Visible = false
                    end
                end
            end
        end
    end
end)

-- Tabs

-- Settings Tab
local SettingsTab = Window:CreateTab("Settings")

SettingsTab:CreateToggle({
    Name = "FullBright",
    CurrentValue = fullBrightEnabled,
    Callback = function(state)
        fullBrightEnabled = state
        setFullBright(state)
    end
})

SettingsTab:CreateToggle({
    Name = "Speed",
    CurrentValue = speedEnabled,
    Callback = function(state)
        speedEnabled = state
        setSpeed(state)
    end
})

SettingsTab:CreateSlider({
    Name = "Speed Value",
    Range = {16, 100},
    Increment = 1,
    CurrentValue = speedValue,
    Callback = function(val)
        speedValue = val
        if speedEnabled then
            setSpeed(true)
        end
    end
})

SettingsTab:CreateToggle({
    Name = "Jump",
    CurrentValue = jumpEnabled,
    Callback = function(state)
        jumpEnabled = state
        setJump(state)
    end
})

SettingsTab:CreateSlider({
    Name = "Jump Power",
    Range = {50, 200},
    Increment = 1,
    CurrentValue = jumpPowerValue,
    Callback = function(val)
        jumpPowerValue = val
        if jumpEnabled then
            setJump(true)
        end
    end
})

SettingsTab:CreateToggle({
    Name = "NoClip",
    CurrentValue = noclipEnabled,
    Callback = function(state)
        noclipEnabled = state
    end
})

SettingsTab:CreateToggle({
    Name = "Hitbox",
    CurrentValue = hitboxEnabled,
    Callback = function(state)
        hitboxEnabled = state
    end
})

SettingsTab:CreateSlider({
    Name = "Hitbox Size",
    Range = {2, 30},
    Increment = 1,
    CurrentValue = hitboxSize,
    Callback = function(val)
        hitboxSize = val
    end
})

SettingsTab:CreateSlider({
    Name = "Hitbox Transparency",
    Range = {0, 1},
    Increment = 0.1,
    CurrentValue = hitboxTransparency,
    Callback = function(val)
        hitboxTransparency = val
    end
})

-- Visual Tab
local VisualTab = Window:CreateTab("üëÅÔ∏è‚Äçüó®Ô∏è Visual")

VisualTab:CreateToggle({
    Name = "Skeleton Bones",
    CurrentValue = skeletonEnabled,
    Callback = function(state)
        skeletonEnabled = state
    end
})

VisualTab:CreateToggle({
    Name = "ESP",
    CurrentValue = espEnabled,
    Callback = function(state)
        espEnabled = state
        if state then
            for _, player in pairs(Players:GetPlayers()) do
                if not espBoxes[player] then
                    createESPBox(player)
                end
            end
        else
            for player, box in pairs(espBoxes) do
                removeESPBox(player)
            end
        end
    end
})

VisualTab:CreateToggle({
    Name = "Hitbox",
    CurrentValue = hitboxEnabled,
    Callback = function(state)
        hitboxEnabled = state
    end
})

VisualTab:CreateSlider({
    Name = "Hitbox Size",
    Range = {2, 30},
    Increment = 1,
    CurrentValue = hitboxSize,
    Callback = function(val)
        hitboxSize = val
    end
})

VisualTab:CreateSlider({
    Name = "Hitbox Transparency",
    Range = {0, 1},
    Increment = 0.1,
    CurrentValue = hitboxTransparency,
    Callback = function(val)
        hitboxTransparency = val
    end
})
